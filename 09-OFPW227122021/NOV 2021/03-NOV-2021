class MessageWriter {
  private IMessageFormatter messageFormatter;
  public void writeMessage(String message) {
    String cMessage = null;
            
    cMessage = messageFormatter.formatMessage(message);
    System.out.println(cMessage);
  }
  
  public void setMessageFormatter(IMessageFormatter messageFormatter) {
    this.messageFormatter = messageFormatter;
  }
}

interface IMessageFormatter {
  String formatMessage(String message);
}
class HTMLMessageFormatterImpl implements IMessageFormatter {}
class PDFMessageFormatterImpl implements IMessageFormatter {}

class  MessageFormatterFactory{
  public static IMessageFormatter createMessageFormatter(String type) {
    IMessageFormatter messageFormatter = null;
    if(type.equals("html")) {
      messageFormatter = new HTMLMessageFormatterImpl();
    }else if(type.equals("pdf")) {
      messageFormatter = new PDFMessageFormatterImpl();
    }
    return messageFormatter;
  }
}

class Test {
  public static void main(String[] args) {
    MessageWriter messageWriter = new MessageWriter();
    
    IMessageFormatter messageFormatter = MessageFormatterFactory.createMessageFormatter("html");
    messageWriter.setMessageFormatter(messageFormatter);
            
    messageWriter.writeMessage("welcome to sdp");
  }
}

In above code the amount of coupling that exists between the classes are quite minimal and can be ignorable, even then also we want to avoid the coupling and want to make classes completely loosely. To understand the reason for it let us explore how an application will moved from development to production environment.
What are the stages in which an application will be moved from development to production env?
  
  













